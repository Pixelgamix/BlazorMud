@using System.ComponentModel
@using BlazorMud.Contracts.DomainModel
@inject MudSessionModel SessionModel
@implements IDisposable

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">BlazorMud</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <AuthorizeView>
            <Authorized>
                @if (SessionModel.Character is null)
                {
                    <li class="nav-item px-6">
                        <NavLink class="nav-link" href="character/select" Match="NavLinkMatch.All">
                            <span class="oi oi-account-login" aria-hidden="true"></span> Select Character
                        </NavLink>
                    </li>
                }
                <li class="nav-item px-6">
                    <NavLink class="nav-link" href="account/logout" Match="NavLinkMatch.All">
                        <span class="oi oi-account-login" aria-hidden="true"></span> Logout (@SessionModel.Account.AccountName)
                    </NavLink>
                </li>
            </Authorized>
            <NotAuthorized>
                <li class="nav-item px-6">
                    <NavLink class="nav-link" href="account/login" Match="NavLinkMatch.All">
                        <span class="oi oi-account-login" aria-hidden="true"></span> Login
                    </NavLink>
                </li>
                <li class="nav-item px-6">
                    <NavLink class="nav-link" href="account/register" Match="NavLinkMatch.All">
                        <span class="oi oi-thumb-up" aria-hidden="true"></span> Register
                    </NavLink>
                </li>
            </NotAuthorized>
        </AuthorizeView>
    </ul>
</div>

@code {
    bool collapseNavMenu = true;
    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SessionModel.PropertyChanged += OnSessionModelPropertyChanged;
    }

    private void OnSessionModelPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        SessionModel.PropertyChanged -= OnSessionModelPropertyChanged;
    }

}
