@page "/account/register"

@using BlazorMud.Contracts.DomainModel
@using BlazorMud.Contracts.Services
@inject IAccountService AccountService
@inject Microsoft.AspNetCore.Components.NavigationManager Navigation

<h1>Register Account</h1>

@if (RegistrationResult is null)
{
    <EditForm Model="@AccountRegistration" OnValidSubmit="@DoRegister">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="username" @bind-Value="@AccountRegistration.AccountName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" @bind-Value="@AccountRegistration.Password" type="password" class="form-control" />
        </div>
        <div class="form-group">
            <label for="password">Confirm Password</label>
            <InputText id="password" @bind-Value="@AccountRegistration.PasswordRepeat" type="password" class="form-control" />
        </div>
        <div class="form-group form-check">
            <InputCheckbox id="behaving" @bind-Value="@AccountRegistration.HasReadAndAcceptedRules" class="form-check-input" />
            <label class="form-check-label" for="behaving">I have read and accept the rules!</label>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary" disabled="@IsWorking">
                @if (!IsWorking)
                {
                    <span>Create Account</span>
                }
                else
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Working...</span>
                }
            </button>
        </div>
        <div class="form-group">
            <small>Already have an account? Go and <a href="account/login">log into your account</a>!</small>
        </div>
    </EditForm>
}
else if (RegistrationResult.IsSuccess)
{
    <div class="alert alert-success" role="alert">
        <h2>Account successfully registered!</h2>
        You may now log in with your new account.
    </div>
    <button @onclick="@(() => Navigation.NavigateTo("account/login"))" class="btn btn-primary">Log in!</button>
}
else
{
    <div class="alert alert-danger" role="alert">
        <h2>Registration failed!</h2>
        @RegistrationResult.Message
    </div>
    <button @onclick="ResetForm" class="btn btn-primary">Try again!</button>
}

@code {

    public AccountRegistrationModel AccountRegistration { get; set; } = new AccountRegistrationModel();
    public bool IsWorking { get; set; }
    public ServiceResult RegistrationResult { get; set; }

    public async void DoRegister()
    {
        IsWorking = true;
        RegistrationResult = await AccountService.RegisterAsync(AccountRegistration);
        IsWorking = false;
        await InvokeAsync(StateHasChanged);
    }

    public void ResetForm()
    {
        AccountRegistration.AccountName = string.Empty;
        AccountRegistration.Password = string.Empty;
        AccountRegistration.PasswordRepeat = string.Empty;
        AccountRegistration.HasReadAndAcceptedRules = false;
        RegistrationResult = null;
    }

}

