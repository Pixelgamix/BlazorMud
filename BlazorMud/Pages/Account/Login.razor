@page "/account/login"

@using BlazorMud.Contracts.DomainModel
@using BlazorMud.Contracts.Services
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IAccountService AccountService
@inject NavigationManager Navigation

<h1>Login</h1>

@if (LoginResult is null)
{
    <EditForm Model="@AccountLogin" OnValidSubmit="@DoLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <InputText id="username" placeholder="Username" @bind-Value="@AccountLogin.Username" class="form-control" />
        </div>
        <div class="form-group">
            <InputText id="password" placeholder="Password" @bind-Value="@AccountLogin.Password" type="password" class="form-control" />
        </div>
        <div class="form-group">
            <div class="form-inline">
                <button type="submit" class="btn btn-primary form-control col-sm-5 my-1 mr-2" disabled="@IsWorking">
                @if (!IsWorking)
                {
                    <span>Login</span>
                }
                else
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Loading...</span>
                }
                </button>
                <label for="loginduration" class="my-1 mr-2">Stay logged in for</label>
                <InputSelect id="loginduration" @bind-Value="@AccountLogin.ExpireMinutesAsString" class="form-control my-1 mr-2">
                    @for (int duration = 60; duration <= 1440; duration += 276)
                    {
                        <option @key="@duration" value="@duration">@(duration / 60) hours</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="form-group">
            <small>Don't have an account yet? Go and <a href="account/register">register an account</a>!</small>
        </div>
    </EditForm>
}
else if (!LoginResult.IsSuccess)
{
    <div class="alert alert-danger" role="alert">
        <h2>Login failed!</h2>
        @LoginResult.Message
    </div>
    <button @onclick="@(() => LoginResult = null)" class="btn btn-primary">Try again!</button>
}

@code {

    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private AccountLoginModel AccountLogin { get; } = new AccountLoginModel();
    private bool IsWorking { get; set; }
    private ServiceResult<string> LoginResult { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Redirect to character selection if user is already logged in
        var authState = await AuthenticationStateTask;
        if (firstRender && authState.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("character/select");
        }
    }

    private async void DoLogin()
    {
        IsWorking = true;
        LoginResult = await AccountService.LoginAsync(AccountLogin);
        IsWorking = false;

        if (LoginResult.IsSuccess)
        {
            await LocalStorage.SetItemAsync("token", LoginResult.Result);
        }
    }

}

