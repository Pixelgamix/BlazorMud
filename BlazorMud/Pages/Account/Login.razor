@page "/account/login"

@using BlazorMud.Contracts.DomainModel
@using BlazorMud.Contracts.Services
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IAccountService AccountService
@inject Microsoft.AspNetCore.Components.NavigationManager Navigation

<h1>Login</h1>

@if (LoginResult is null)
{
    <EditForm Model="@AccountLogin" OnValidSubmit="@DoLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="username" @bind-Value="@AccountLogin.Username" class="form-control" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" @bind-Value="@AccountLogin.Password" type="password" class="form-control" />
        </div>
        <div class="form-group">
            <label for="loginduration">Stay logged in for</label>
            <InputSelect id="loginduration" @bind-Value="@AccountLogin.ExpireMinutesAsString">
                @for (int duration = 60; duration <= 1440; duration += 60)
                {
                    <option @key="@duration" value="@duration">@(duration / 60) hours</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary" disabled="@IsWorking">
                @if (!IsWorking)
                {
                    <span>Login</span>
                }
                else
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Loading...</span>
                }
            </button>
        </div>
        <div class="form-group">
            <small>Don't have an account yet? Go and <a href="account/register">register an account</a>!</small>
        </div>
    </EditForm>
}
else if (LoginResult.IsSuccess)
{
    <div class="alert alert-success" role="alert">
        <h2>Your are now logged in!</h2>
        @LoginResult.Message
    </div>
    <button @onclick="@(() => Navigation.NavigateTo(""))" class="btn btn-primary">Select your character!</button>
}
else
{
    <div class="alert alert-danger" role="alert">
        <h2>Login failed!</h2>
        @LoginResult.Message
    </div>
    <button @onclick="@(() => LoginResult = null)" class="btn btn-primary">Try again!</button>
}

@code {

    public AccountLoginModel AccountLogin { get; set; } = new AccountLoginModel();
    public bool IsWorking { get; set; }
    public ServiceResult<string> LoginResult { get; set; }

    public async void DoLogin()
    {
        IsWorking = true;
        LoginResult = await AccountService.LoginAsync(AccountLogin);
        IsWorking = false;

        if (LoginResult.IsSuccess)
        {
            await LocalStorage.SetItemAsync("token", LoginResult.Result);
        }

        await InvokeAsync(StateHasChanged);
    }

}

