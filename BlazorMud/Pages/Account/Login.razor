@page "/account/login"

@using BlazorMud.Contracts.Entities
@using BlazorMud.Contracts.Services
@using System.ComponentModel.DataAnnotations
@inject IAccountService AccountService
@inject Microsoft.AspNetCore.Components.NavigationManager Navigation

<h1>Login</h1>

@if (LoginResult is null)
{
    <EditForm Model="@UsernameAndPassword" OnValidSubmit="@DoLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="username" @bind-Value="@UsernameAndPassword.Username" class="form-control" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" @bind-Value="@UsernameAndPassword.Password" type="password" class="form-control" />
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Login</button>
        </div>
        <div class="form-group">
            <small>Don't have an account yet? Go and <a href="account/register">register an account</a>!</small>
        </div>
    </EditForm>
}
else if (LoginResult.IsSuccess)
{
    <div class="alert alert-success" role="alert">
        <h2>Your are now logged in!</h2>
        @LoginResult.Message
    </div>
    <button @onclick="@(() => Navigation.NavigateTo(""))" class="btn btn-primary">Select your character!</button>
}
else
{
    <div class="alert alert-danger" role="alert">
        <h2>Login failed!</h2>
        @LoginResult.Message
    </div>
    <button @onclick="@(() => LoginResult = null)" class="btn btn-primary">Try again!</button>
}

@code {

    public class UsernamePasswordCombo
    {
        [Required]
        [StringLength(32, ErrorMessage = "Username is too long.")]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }
    }

    public UsernamePasswordCombo UsernameAndPassword { get; set; } = new UsernamePasswordCombo();
    public ServiceResult<Account> LoginResult { get; set; }

    public async void DoLogin()
    {
        LoginResult = await AccountService.LoginAsync(UsernameAndPassword.Username, UsernameAndPassword.Password);
    }

}

